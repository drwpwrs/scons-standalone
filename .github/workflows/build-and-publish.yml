name: Build and Publish

on:
  push:
    branches:
      - main
  workflow_dispatch: # Allow manual triggers for testing

jobs:
  check_version:
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.check_release.outputs.should_build }}
      scons_version: ${{ steps.get_version.outputs.scons_version }}
    steps:
      - uses: actions/checkout@v3

      - name: Get SCons version
        id: get_version
        run: echo "scons_version=$(cat .scons-version)" >> $GITHUB_OUTPUT

      - name: Check if release exists
        id: check_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASE_EXISTS=$(gh release view v${{ steps.get_version.outputs.scons_version }} > /dev/null 2>&1 && echo "true" || echo "false")
          if [ "$RELEASE_EXISTS" = "false" ]; then
            echo "should_build=true" >> $GITHUB_OUTPUT
          else
            echo "should_build=false" >> $GITHUB_OUTPUT
          fi

  build:
    needs: check_version
    if: needs.check_version.outputs.should_build == 'true'
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            output_name: scons-linux
          - os: windows-latest
            output_name: scons-win.exe
          - os: macos-latest
            output_name: scons-macos

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies and build executable
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller scons==${{ needs.check_version.outputs.scons_version }}
          pyinstaller --hidden-import=SCons.Script --name ${{ matrix.output_name }} src/scons_wrapper.py

      - name: Compress executable (Unix)
        if: runner.os != 'Windows'
        run: |
          cd dist
          zip -r ${{ matrix.output_name }}.zip ${{ matrix.output_name }}

      - name: Compress executable (Windows)
        if: runner.os == 'Windows'
        run: |
          cd dist
          Compress-Archive -Path ${{ matrix.output_name }} -DestinationPath ${{ matrix.output_name }}.zip

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.output_name }}.zip
          path: dist/${{ matrix.output_name }}.zip

  prepare-package:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Python with cache
        id: setup-python
        uses: ./.github/actions/setup-python

      - name: Init Bun
        uses: ./.github/actions/init-bun

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: dist

      - name: Update package.json version
        run: |
          sed -i 's/"version": ".*"/"version": "${{ steps.setup-python.outputs.scons-version }}"/' package.json

      - name: Prepare package
        run: |
          mkdir -p package/bin
          mv dist/*/*.zip package/bin/
          cp src/run.js package/bin/scons
          chmod +x package/bin/scons
          cp package.json README.md package/

      - name: Upload package artifact
        uses: actions/upload-artifact@v3
        with:
          name: npm-package
          path: package

  npm-publish:
    needs: prepare-package
    runs-on: ubuntu-latest
    steps:
      - name: Download package artifact
        uses: actions/download-artifact@v3
        with:
          name: npm-package
          path: package

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '14'
          registry-url: 'https://registry.npmjs.org'

      - name: Check if version exists on npm
        id: version-check
        run: |
          VERSION=$(node -p "require('./package/package.json').version")
          if npm view scons-cli@$VERSION version &>/dev/null; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Publish to npm
        if: steps.version-check.outputs.exists == 'false'
        run: |
          cd package
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  github-release:
    needs: prepare-package
    runs-on: ubuntu-latest
    steps:
      - name: Download package artifact
        uses: actions/download-artifact@v3
        with:
          name: npm-package
          path: package

      - name: Get version
        id: get-version
        run: echo "version=$(node -p "require('./package/package.json').version")" >> $GITHUB_OUTPUT

      - name: Check if GitHub release exists
        id: check-release
        run: |
          if gh release view v${{ steps.get-version.outputs.version }} &>/dev/null; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub Release
        if: steps.check-release.outputs.exists == 'false'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.get-version.outputs.version }}
          name: Release ${{ steps.get-version.outputs.version }}
          body: >
            This release corresponds to SCons ${{ steps.get-version.outputs.version }}.

            SCons Release: https://github.com/SCons/scons/releases/tag/${{ steps.get-version.outputs.version }}
          files: package/bin/*.zip
