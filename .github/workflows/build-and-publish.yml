name: Build and Publish

on:
  push:
    branches:
      - main
  workflow_dispatch: # Allow manual triggers for testing

jobs:
  check_version:
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.check_release.outputs.should_build }}
      scons_version: ${{ steps.get_version.outputs.scons_version }}
    steps:
      - uses: actions/checkout@v3

      - name: Get SCons version
        id: get_version
        run: echo "scons_version=$(cat .scons-version)" >> $GITHUB_OUTPUT

      - name: Check if release exists
        id: check_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASE_EXISTS=$(gh release view v${{ steps.get_version.outputs.scons_version }} > /dev/null 2>&1 && echo "true" || echo "false")
          if [ "$RELEASE_EXISTS" = "false" ]; then
            echo "should_build=true" >> $GITHUB_OUTPUT
          else
            echo "should_build=false" >> $GITHUB_OUTPUT
          fi

  build:
    needs: check_version
    if: needs.check_version.outputs.should_build == 'true'
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            output_name: scons-linux
          - os: windows-latest
            output_name: scons-win.exe
          - os: macos-latest
            output_name: scons-macos

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller scons==${{ needs.check_version.outputs.scons_version }}

      - name: Get SCons path and build executable
        run: |
          SCONS_PATH=$(python -c "import scons, os; print(os.path.dirname(scons.__file__))")
          echo "SCons path: $SCONS_PATH"
          if [ "${{ runner.os }}" == "Windows" ]; then
            pyinstaller --add-data "${SCONS_PATH};scons" --name ${{ matrix.output_name }} src/scons_wrapper.py
          else
            pyinstaller --add-data "${SCONS_PATH}:scons" --name ${{ matrix.output_name }} src/scons_wrapper.py
          fi

      - name: Compress executable
        run: |
          cd dist
          zip -r ${{ matrix.output_name }}.zip ${{ matrix.output_name }}

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.output_name }}.zip
          path: dist/${{ matrix.output_name }}.zip

  package:
    needs: [check_version, build]
    if: needs.check_version.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Init Bun
        uses: ./.github/actions/init-bun

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: dist

      - name: Update package.json version
        run: |
          sed -i 's/"version": ".*"/"version": "${{ needs.check_version.outputs.scons_version }}"/' package.json

      - name: Prepare package
        run: |
          mkdir -p package/bin
          mv dist/*/*.zip package/bin/
          cp src/run.js package/bin/scons
          chmod +x package/bin/scons
          cp package.json README.md package/

      - name: Install dependencies
        run: cd package && bun install

      - name: Publish to npm
        run: |
          cd package
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > .npmrc
          npm publish --access public
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.check_version.outputs.scons_version }}
          name: Release ${{ needs.check_version.outputs.scons_version }}
          body: >
            This release corresponds to SCons ${{ needs.check_version.outputs.scons_version }}.

            SCons Release: https://github.com/SCons/scons/releases/tag/${{ needs.check_version.outputs.scons_version }}
          files: package/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
